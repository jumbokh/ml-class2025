The error message you're encountering indicates that the `mean_squared_log_error` function in scikit-learn cannot handle target values (or predictions) that are less than or equal to zero. This is because the logarithm of a non-positive number is undefined in real numbers, which is why the function throws an error.

### Understanding the Error

The `mean_squared_logarithmic_error` function computes the mean squared error between the true and predicted values after taking their natural logarithms. This metric is particularly useful for regression problems where you want to penalize underestimates more than overestimates, especially when the target variable spans several orders of magnitude.

### Steps to Resolve the Error

To resolve this issue, you need to ensure that all your target values (and predictions) are strictly greater than zero before calculating the RMSLE. Here's how you can address it:

1. **Check and Transform Target Values:**
   Ensure that your target variable `y_train` and `y_test` do not contain any zeros or negative values. If they do, consider transforming them to be positive. A common approach is to add a small constant (e.g., 1) to all values:

   ```python
   # Add a small constant to ensure positivity
   epsilon = 1e-7  # Small value to avoid log(0)
   y_train_transformed = y_train + epsilon
   y_test_transformed = y_test + epsilon

   # Train the model with transformed target values
   clf.fit(x_train, y_train_transformed)

   # Predict using the trained model
   test_pred = clf.predict(x_test)

   # Transform predictions to ensure positivity
   test_pred_transformed = np.maximum(test_pred, epsilon)  # Ensure no negative or zero predictions

   # Calculate RMSLE with transformed values
   rmsle.append(np.sqrt(mean_squared_log_error(y_test_transformed, test_pred_transformed)))
   ```

2. **Re-evaluate Model Performance:**
   After transforming the target and prediction values, re-evaluate your model's performance using the RMSLE metric.

### Example Code

Here is an updated version of your code with the necessary transformations:

```python
import numpy as np
from sklearn.metrics import mean_squared_log_error

# Assuming 'model_names' and 'models' are already defined and contain the model names and models respectively.
rmsle = []
for model in models:
    clf = models[model]
    
    # Ensure y_train is strictly positive
    epsilon = 1e-7
    y_train_transformed = y_train + epsilon
    
    # Train the model with transformed target values
    clf.fit(x_train, y_train_transformed)
    
    # Predict using the trained model
    test_pred = clf.predict(x_test)
    
    # Ensure predictions are strictly positive
    test_pred_transformed = np.maximum(test_pred, epsilon)
    
    # Calculate RMSLE with transformed values
    rmsle.append(np.sqrt(mean_squared_log_error(y_test + epsilon, test_pred_transformed)))

d = {'Modelling Algo': model_names, 'RMSLE': rmsle}
print(d)
```

### Summary

By ensuring that all target and prediction values are strictly positive, you can safely use the `mean_squared_logarithmic_error` function without encountering the ValueError. This approach ensures that your model's performance metric is calculated correctly.

If you have any further questions or need additional assistance, feel free to ask!